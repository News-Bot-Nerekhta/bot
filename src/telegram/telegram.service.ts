import { Injectable, Logger } from '@nestjs/common';
 import { InjectRepository } from '@nestjs/typeorm';
 import { Repository } from 'typeorm';
 import { Telegraf } from 'telegraf';
 import { Subscriber } from './entities/subscriber.entity';
 
 @Injectable()
 export class TelegramService {
   private bot: Telegraf;
   private readonly logger = new Logger(TelegramService.name);
 
   constructor(
     @InjectRepository(Subscriber)
     private subscriberRepository: Repository<Subscriber>,
   ) {
     const token = process.env.TELEGRAM_BOT_TOKEN;
     if (!token) {
       throw new Error(
         'TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è',
       );
     }
     this.bot = new Telegraf(token);
     this.initializeBot();
   }
 
   private initializeBot() {
     this.bot.command('start', async (ctx) => {
       const telegram_id = ctx.from.id;
 
       const subscriber = await this.subscriberRepository.findOne({
         where: { telegram_id: telegram_id.toString() },
       });
 
       const welcomeMessage =
         'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≥–æ—Ä–æ–¥–∞ –ù–µ—Ä–µ—Ö—Ç–∞!\n\n' +
         '–≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n' +
         '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
         '‚Ä¢ /subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n' +
         '‚Ä¢ /unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n' +
         '‚Ä¢ /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n';
 
       await ctx.reply(welcomeMessage);
     });
 
     this.bot.command('subscribe', async (ctx) => {
       const telegram_id = ctx.from.id;
 
       const subscriber = await this.subscriberRepository.findOne({
         where: { telegram_id: telegram_id.toString() },
       });
 
       if (!subscriber) {
         await this.subscriberRepository.save({ telegram_id: telegram_id.toString() });
         ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π!');
       } else {
         ctx.reply('‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π.');
       }
     });
 
     this.bot.command('unsubscribe', async (ctx) => {
       const telegram_id = ctx.from.id;
       await this.subscriberRepository.delete({ telegram_id: telegram_id.toString() });
       ctx.reply('üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.');
     });
 
     this.bot.command('about', async (ctx) => {
       const aboutMessage =
         'üì± –ë–æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≥–æ—Ä–æ–¥–∞ –ù–µ—Ä–µ—Ö—Ç–∞\n\n' +
         '–í–µ—Ä—Å–∏—è: 1.0.0\n' +
         '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @danya_lobanov\n\n' +
         '–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–∞ ' +
         '–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.\n\n';
 
       await ctx.reply(aboutMessage);
     });
 
     this.bot.launch();
   }
 
   async notifySubscribers(message: string) {
     const subscribers = await this.subscriberRepository.find();
 
     for (const subscriber of subscribers) {
       try {
         await this.bot.telegram.sendMessage(subscriber.telegram_id, message);
       } catch (error) {
         this.logger.error(
           `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É ${subscriber.telegram_id}:`,
           error,
         );
       }
     }
   }
 }